{"version":3,"sources":["serviceWorker.js","tweets/components.js","lookup/components.js","index.js"],"names":["Boolean","window","location","hostname","match","TweetComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","event","preventDefault","newval","current","value","tempNewTweets","unshift","content","likes","id","ref","required","name","type","TweetList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","console","log","send","loadTweets","alert","map","item","index","Tweet","tweet","key","ActionBtn","action","tweetLikes","setTweetLikes","justClicked","setJustClicked","actionDisplay","display","onClick","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c1a7d929.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","  \nimport React, {useEffect, useState}  from 'react'\n\nimport {loadTweets} from '../lookup'\n\nexport function TweetComponent(props){\n  const textAreaRef = React.createRef()\n  const [newTweets, setNewTweets] = useState([])\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    const newval = textAreaRef.current.value\n    const tempNewTweets = [...newTweets]\n    tempNewTweets.unshift({\n      content : newval,\n      likes : 0,\n      id : 1234\n    })\n    setNewTweets(tempNewTweets)\n    textAreaRef.current.value = '' \n  }\n  \n  return <div className={props.className}>\n          <div className='col-12'>\n          <form onSubmit={handleSubmit}>\n          <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'>\n      \n          </textarea>\n          <button type='submit' className='btn btn-primary my-3'>Tweet</button>\n        </form>\n        </div>\n        <TweetList newTweets={newTweets} />\n        </div>\n}\n\nexport function TweetList(props){\n  const [tweetsInit, setTweetsInit] = useState([])\n  const [tweets, setTweets] = useState([])\n\n  useEffect(() => {\n    const final = [...props.newTweets].concat(tweetsInit)\n    if (final.length !== tweets.length){\n      setTweets(final)\n    }\n  }, [props.newTweets, tweets, tweetsInit])\n\n  useEffect(() => {\n    const myCallback = (response, status) => {\n      if (status === 200){\n        setTweetsInit(response)\n      } else {\n        alert(\"There was an error\")\n      }\n    }\n    loadTweets(myCallback)\n  }, [tweetsInit])\n\n  return <div>\n    {tweets.map( (item, index) => {\n      return <Tweet tweet={item} className='my-5 py-5 border bg-white text-dark' key={`${index} - ${item.id}`} />\n    })}\n    </div>\n}\n\nexport function ActionBtn(props) {\n    const {tweet, action} = props\n    const [tweetLikes, setTweetLikes] = useState(tweet.likes ? tweet.likes : 0)\n    const [justClicked, setJustClicked] = useState(false)\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\n    const actionDisplay = action.display ? action.display : 'Action'\n    const handleClick = (event) => {\n      event.preventDefault()\n      if (action.type === 'like') {\n        if (justClicked === true){\n           setJustClicked(false)\n           setTweetLikes(tweetLikes - 1 )\n        }\n        else { \n          setJustClicked(true)\n          setTweetLikes(tweet.likes + 1)\n        }\n      }\n    }\n    const display = action.type === 'like' ? `${tweetLikes} ${actionDisplay}` : actionDisplay\n    return <button className={className} onClick={handleClick}>{display}</button>\n  }\n  \nexport function Tweet(props) {  \n    const {tweet}  = props\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n    return <div className= {className}>\n        <p>{tweet.id} - {tweet.content}</p>\n        <div className='btn btn-group'>\n        <ActionBtn tweet={tweet} action={{type : \"like\" , display : \"Likes\"}}/>\n        <ActionBtn tweet={tweet} action={{type : \"unlike\" , display : \"Unlike\"}}/>\n        <ActionBtn tweet={tweet} action={{type : \"retweet\" , display : \"\"}}/>\n        </div>\n    </div>\n}\n\n","\nexport function loadTweets(callback) {\n    const xhr = new XMLHttpRequest()\n    const method = 'GET' // \"POST\"\n    const url = \"http://localhost:8000/api/tweets/\"\n    const responseType = \"json\"\n    xhr.responseType = responseType\n    xhr.open(method, url)\n    xhr.onload = function() {\n      callback(xhr.response, xhr.status)\n    }\n    xhr.onerror = function (e) {\n      console.log(e)\n      callback({\"message\": \"The request was an error\"}, 400)\n    }\n    xhr.send()\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { TweetComponent } from './tweets';\n\n\nReactDOM.render(\n    <TweetComponent />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}