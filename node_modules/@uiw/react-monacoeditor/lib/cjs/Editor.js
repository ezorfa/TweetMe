"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var monaco = _interopRequireWildcard(require("monaco-editor"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { return function () { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function noop() {}

var MonacoEditor = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(MonacoEditor, _Component);

  var _super = _createSuper(MonacoEditor);

  function MonacoEditor(props) {
    var _this;

    (0, _classCallCheck2.default)(this, MonacoEditor);
    _this = _super.call(this, props);

    _this.editorRef = function (component) {
      _this.containerElement = component;
    };

    _this.containerElement = undefined;
    _this._currentValue = props.value;
    return _this;
  }

  (0, _createClass2.default)(MonacoEditor, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.initMonacoEditor();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.props.value !== this._currentValue) {
        this._currentValue = this.props.value;

        if (this.editor) {
          this.editor.setValue(this._currentValue);
        }
      }

      if (prevProps.language !== this.props.language) {
        monaco.editor.setModelLanguage(this.editor.getModel(), this.props.language);
      }

      if (prevProps.theme !== this.props.theme) {
        monaco.editor.setTheme(this.props.theme);
      }

      if (this.editor && (this.props.width !== prevProps.width || this.props.height !== prevProps.height)) {
        this.editor.layout();
      }
    }
  }, {
    key: "editorDidMount",
    value: function editorDidMount(editor) {
      var _this2 = this;

      this.props.editorDidMount(editor, monaco);
      editor.onDidChangeModelContent(function (event) {
        var value = editor.getValue(); // Always refer to the latest value

        _this2._currentValue = value;

        _this2.props.onChange(value, event);
      });
    }
  }, {
    key: "initMonacoEditor",
    value: function initMonacoEditor() {
      var value = this.props.value !== null ? this.props.value : this.props.defaultValue;
      var _this$props = this.props,
          language = _this$props.language,
          theme = _this$props.theme,
          options = _this$props.options;

      if (this.containerElement) {
        this.editor = monaco.editor.create(this.containerElement, _objectSpread({
          value: value,
          language: language
        }, options));

        if (theme) {
          monaco.editor.setTheme(theme);
        } // After initializing monaco editor


        this.editorDidMount(this.editor);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          width = _this$props2.width,
          height = _this$props2.height,
          className = _this$props2.className;
      return /*#__PURE__*/_react.default.createElement("div", {
        className: className,
        ref: this.editorRef,
        style: {
          width: width,
          height: height
        }
      });
    }
  }]);
  return MonacoEditor;
}(_react.Component);

exports.default = MonacoEditor;
MonacoEditor.propTypes = {
  width: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  height: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  value: _propTypes.default.string,
  defaultValue: _propTypes.default.string,
  language: _propTypes.default.string,
  theme: _propTypes.default.string,
  options: _propTypes.default.object,
  editorDidMount: _propTypes.default.func,
  onChange: _propTypes.default.func
};
MonacoEditor.defaultProps = {
  width: '100%',
  height: '100%',
  value: null,
  defaultValue: '',
  language: 'javascript',
  theme: null,
  options: {},
  editorDidMount: noop,
  onChange: noop
}; 
//# sourceMappingURL=Editor.js.map